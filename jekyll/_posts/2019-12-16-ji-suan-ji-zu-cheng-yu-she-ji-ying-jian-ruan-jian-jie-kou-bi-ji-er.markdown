---
layout: post
title: 《计算机组成与设计 硬件软件接口》 笔记 二
date: 2019-12-16 15:00:32 +0800
categories: 技术 硬件
issue_id: 68
---

## 计算机算数运算

### 加减法
 
溢出发生于：
- 两个符号相同的数相加
- 两个符号不同的数相减

当然了，上面两种情况也不一定发生，只有当数足够大（或足够小）时，才会溢出。

MIPS提供一些指令，来处理溢出的情况。如：add sub addi等，也有addu subu addu这些指令忽略溢出。

忽略的意思是溢出的时候，不会产生异常（中断）

C 语言忽略溢出，所以MIPS的C编译器一般用addu subu这些指令。

### 乘法

MIPS 忽略乘法溢出
乘法步骤：  乘数 X  被乘数
- 乘数左移
- 判断被乘数最低位，如果是1，则加上乘数
- 被乘数右移

以上是只用一个加法器的方法，当然了，可以通过用32个加法器来加速。最快的加速方式达到小于5次加法的时间。

### 除法

除法优化难度较大，因为不能像乘法那样，一下子给32个加法器。除法需要试探每次的余数是否大于除数。

除数优化的方法是使用一种SRT的猜测方式，如果猜测不对的话，可以在后续操作中修正。这里我没看太懂。

MIPS的除法指令也忽略溢出

### 浮点数
(单精度)浮点数的表示：

![浮点数的表示][1]

#### IEEE 754
![IEEE754][2]

需要注意的是，这里隐含的前导1是针对规格化二进制数而言的。
所谓规格化二进制数，就是指数部分不为0的数。

举例:
- 0 的表示 00000000000000000...
- 1 的表示 符号位0,指数为0,尾数为1 (因为1为非规格化二进制数，指数部分为0，因此没有隐含的前导1)

IEEE754的表示编码：

![IEEE754][3]

IEEE754的指数表示不是使用补码，使用的是：带偏阶的计数法。

单精度浮点的偏阶是127

双精度浮点的偏阶是1023

以单精度为例，之所以用这种方式，是为了让最大的指数表示为1111 1111（二进制），最小的（负）指数表示为：0000 0000。

我感觉是脱裤子放屁。

[1]: https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_float.png

[2]: https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_ieee754.png
[3]: https://raw.githubusercontent.com/Ncerzzk/MyBlog/master/img/mips_ieee754_2.png