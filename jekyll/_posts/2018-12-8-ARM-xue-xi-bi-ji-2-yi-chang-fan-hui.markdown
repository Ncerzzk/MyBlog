---
layout: post
title: ARM学习笔记2——异常返回
date: 2018-12-08 21:56:52 +0800
categories: 硬件 技术
issue_id: 45
---
### 异常返回
cortex-V9有八级流水线，但实际上仍可以用三级流水线来分析，因此我们就不自找麻烦去分析八级流水线了。

三级流水线：
取指令 解码 执行

其中，PC指向的是取指令。举例而言，当PC=0x3008，执行的是0x3000这条指令。当异常（中断）发生时，处理器将** PC-4**保存到R14中。（即跳出中断后，应该执行下一条指令）

> PC值指向当前执行指令的地址加8处，也就是说， 当执行指令A（地址0x8000）时，PC 等于指令C 的地址（0x8008）。假如指令A
> 是“BL”指令，则当执行该指令时，会把PC（=0x8008）保存到LR 寄存器里面，但是接下去处理器会马上对LR
> 进行一个自动的调整动作：LR=LR-4。这样，最终保存在 LR 里面的是 B 指令的地址，所以当从 BL 返回时，LR
> 里面正好是正确的返回地址。同样的调整机制在所有LR自动保存操作中都存在，比如进入中断响应时，处理器所做的LR
> 保存中，也进行了一次自动调整，并且调整动作都是LR=LR-4。
> ---------------------  作者：cc243494926  来源：CSDN  原文：https://blog.csdn.net/cc243494926/article/details/60478453 
> 版权声明：本文为博主原创文章，转载请附上博文链接！

但很多时候，PC-4并不是正确的要执行的下一条指令，因此返回的时候，需要再确定一下返回地址。

#### 软件中断异常、未定义指令异常
刚执行到该指令时，就触发的异常。如该指令位0x3000，则PC还是0x3008。因此R14中的值PC-4 就是下一条指令。这两种情况不需要再计算返回地址。R14中的值就是。

#### 预取指令异常
刚执行到此指令时，就触发异常。与上面两种一样。但不同点再于，**该异常出去后，应该再执行一下本指令**。因此R14中的值PC-4就不对了，应该是PC-8，也即R14-4

#### 数据中止异常
发生在**指令已经执行了**，但存储器返回表示访问了异常地址。若该指令为0x3000,则此时PC已经是0x300C（因为指令已经执行，PC已经去取下一条指令了）。异常发生后，R14为PC-4。**该异常与预取指令异常一样，异常结束后，要重新执行该指令，因此应该是R14-8（PC-C）**

#### 中断、快速中断
在执行某个指令时发生这两种中断，PC值已经更新。若该指令为0x3000,则此时PC已经是0x300C（因为指令已经执行，PC已经去取下一条指令了）。异常发生后，R14为PC-4。因此执行完该异常，要执行下一条指令，**应该是R14-4（PC-8)**  （和数据中止不一样的时，这两种异常不用再把该指令执行一次）











