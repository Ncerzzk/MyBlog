---
layout: post
title: 用scala写一个基本五级流水线CPU(六)第一次重构
date: 2020-06-30 19:18:49 +0900
categories: 技术 硬件
issue_id: 126
---

CPU写到这里，流水线已经基本可以跑起来了，但是目前在写的过程中也渐渐感觉到一些问题，具体是：

- 流水线缓冲级的写法过于繁琐，虽然之前稍微了修改了一下，使显式连接没那么多，但问题还在
- 增加指令较为麻烦，如果说是增加普通的I、R型指令，因此之前已经写好模式，直接增加即可。但在增加一些指令，比如MULT,MULTU,就发现了问题。因为这两个指令并不是向寄存器组的寄存器中写入，而是向寄存器HI,LO写入。那怎么办呢，修改前面的范式，让他除了能像寄存器组的寄存器写入，还能写入HI,LO吗？可想而知，最后那个范式会越来越复杂。
  

重构计划：

- 目前流水线是由Component的形式组装起来的，但实际上，在spinalHDL，它建议不必要的时候，采用Area而不是另外建立Component，因为建立Component就意味着要重复定义输入输出端口。之前我虽然采用将端口抽象成类的方式，但仍有些累赘。
  - 为什么一开始要采用Component呢，因为这是用Verilog写CPU的正常方法。以Verilog的表现力，如果将所有的东西挤在一个Module中，可想而知最后只能变成一坨屎山。但是
  - 因此，现在考虑使用Area来重构流水线
  
- 指令系统参考了VexRiscv的方法，打算用另外一个思路来写。
  - 以前的思路是按照流水线为主的思路，在流水线的每一级，针对不同的指令做不同的操作。
  - VexRiscv的思路是以指令为主，每个指令在每个阶段做什么事，直接Plug到该阶段。当然了，VexRiscv的实现比较复杂，我的scala功底还不够能完全理解他的实现方式，只能说先借鉴一下思想。

